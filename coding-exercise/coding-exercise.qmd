---
title: "R Coding Exercise"
---

```{r}
#load package
library(dslabs)
library(dplyr)
library(ggplot2)
library(plotly)
```

# review the gapminder dataset

```{r}
#help for the gapminder data
help(gapminder)

#examine data structure
str(gapminder)

#summary of data
summary(gapminder)

#examine class
class(gapminder)

```

# generate new objects containing values for African countries only

```{r}
# Create object called africadata with African countries only
africadata <- gapminder %>%
  filter(continent == "Africa")
africadata <- africadata %>% filter(continent == "Africa")

# Create a new object with life expectancy and infant mortality from africadata
africa_mort_expect <- africadata %>%
  select(infant_mortality, life_expectancy)

# View structure and summary of the mortality and life expectancy data
str(africa_mort_expect)
summary(africa_mort_expect)

# Create a new object with population and life expectancy from African data
africa_pop_expect <- africadata %>%
  select(population, life_expectancy)

# View structure and summary of the population and life expectancy data
str(africa_pop_expect)
summary(africa_pop_expect)

```

# create plots using newly created objects

## When plotted, there are distinct "streaks" in the data. This is especially evident in the Life Expectancy vs log$_{10}$ Population, These streaks likely represent the trajectory of individual countries over time. In general, as levels of development improve, so do health outcomes like life expectancy.

### Note: in both plots there is an outlier showing a visible decrease in life expectancy. Without countries or years in the plots, it is difficult to pin point the exact cause of that decrease, but it is likely due to a single, tranformational event. In this case, I would attribute that to the civil war and genocide in Rwanda in the early 1990s.

```{r}
library(ggplot2)

# Plot life expectancy as a function of infant mortality
plot_le_vs_im <- ggplot(africa_mort_expect, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Life Expectancy vs Infant Mortality",
       x = "Infant Mortality",
       y = "Life Expectancy")

plot_le_vs_im

#plot life expectancy vs population with population on a log scale
plot_le_vs_pop_log <- ggplot(africa_pop_expect, aes(x = population, y = life_expectancy)) +
    geom_point() +
    theme_minimal() +
    labs(title = "Life Expectancy vs Population",
         x = "Population (Log Scale)",
         y = "Life Expectancy") +
    scale_x_log10()

plot_le_vs_pop_log
```

# Identifying years without missing values for infant mortality

```{r}
#identify years with missing data using dplyr package
africadata %>%
  group_by(year) %>%
  summarize(missing_infant_mortality = sum(is.na(infant_mortality))) %>%
  filter(missing_infant_mortality > 0)
```

## creating object from africadata for the year 2000

```{r}
# filter data for year == 2000
africadata2000 <- africadata %>%
  filter(year == 2000)

#examine the structure and summary of africadata2000
str(africadata2000)
summary(africadata2000)
```

## new plots using only data from the year 2000 in the africadata file

```{r}
# plot infant mortality vs life expectancy for year=2000
plot_le_vs_im_2000 <- ggplot(africadata2000, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Life Expectancy vs Infant Mortality, year=2000",
       x = "Infant Mortality",
       y = "Life Expectancy")
plot(plot_le_vs_im_2000)

# plot life expectancy vs population (log10) for year=2000
plot_le_vs_pop_log_2000 <- ggplot(africadata2000, aes(x = population, y = life_expectancy)) +
    geom_point() +
    theme_minimal() +
    labs(title = "Life Expectancy vs Population Year = 2000",
         x = "Population (Log Scale)",
         y = "Life Expectancy") +
    scale_x_log10()

plot_le_vs_pop_log

```

## linear models

### life_expectancy\~infant_mortality

```{r}
fit1 <- lm(life_expectancy ~ infant_mortality, data = africadata2000)

summary(fit1)


```

## linear models

### life_expectancy\~population

```{r}
fit2 <- lm(life_expectancy ~ population, data = africadata2000)

summary(fit2)

```

# Interpreting the results for the linear models

### fit1 examines the relationship between life expectancy and infant mortality, where life expectancy is the dependent variable

#### given the low p-value, there is a statistically significant negative relationship between life expectancy and infant mortality

### fit2 examines the relationship between life expectancy and population, where life expectancy is the dependent variable.

#### given the high p-value the model does not indicate a statistically significant relationship between life expectancy and population

# *The section below was contributed by Xylem Hu*

# Review the stars dataset

```{r}
#help for the stars data
help(stars)

#examine data structure
str(stars)

#summary of data
summary(stars)

#examine class
class(stars)

```

# generate new objects only containing name, magnitude and temprature

```{r}

# Create a new object dropping type out
starsdata <- stars %>%
  select(star,magnitude,temp)

# View structure and summary of the mortality and life expectancy data
str(starsdata)
summary(starsdata)

# Create a new object showing stars' type
starstype <- stars %>%
  select(star,type)
summary(starsdata)
```

***Thought***: After dataset review, I found that there are 4 variables in this dataset and "type" might not be so helpful for me to do the following data analysis so I tried to generate a new object only including star name, magnitude and temperature. As for star type, later I was thinking that if I can make a summary table only for it.

# summary tables and figures

```{r}
#summary tables
summary_df = skimr::skim(starsdata)
print(summary_df)

summary_df = skimr::skim(starstype)
print(summary_df)

# save to file
#summarytable1_file = here("coding-exercise","results", "table-files", "summarytable_stars.rds")
#saveRDS(summary_df, file = summarytable1_file)

#summarytable2_file = here("coding-exercise","results", "table-files", "summarytable_star_type.rds")
#saveRDS(summary_df, file = summarytable2_file)

# scatter plot magnitude by temperature
plot_stars <- ggplot(starsdata, aes(x = magnitude, y = temp)) +
  geom_point() + 
  theme_minimal() +
  scale_y_log10("temperature log10 K") +
  geom_smooth(method='lm') +
  labs(title = "Magnitude by Temperature of stars data",
       x = "Magnitude",
       y = "Temprature")
plot(plot_stars)

# save to file
#starsplot_file = here("coding-exercise","results", "figure-files", "scatterplot_stars.rds")
#saveRDS(plot, file = starsplot_file)
```

# linear models

```{r}
stars_fit1 <- lm(log10(temp) ~ magnitude, data = starsdata)

summary(stars_fit1)

# save to file

#stars_fit1_file = here("coding-exercise","results", "linear-model", "stars_fit1.rds")
#saveRDS(stars_fit1, file = stars_fit1_file)
```

***Thought***: From the scatter plot I had a guess that there may be a negative correlation between temperature and magnitude of the stars. But at first when I use original numbers of temperature, the plot was more likely a curve so I added log10 scale on temperature and then it bacame a little bit more linear. After that I used lm function to fit temperature as a outcome and magnitude as a predictor. The result showed that magnitude had significant effect on temperature.

