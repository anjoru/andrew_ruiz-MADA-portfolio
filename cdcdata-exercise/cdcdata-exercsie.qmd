---
title: "cdcdata-exercise"
author: "Andrew Ruiz"
editor: visual
---

#Load libraries and read data

```{r}
rm(list = ls())

library(here)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(forecast)
library(Hmisc)

# Read the CSV file using here()
rabies2020 <- read_csv(here("cdcdata-exercise", "Rabies2020.csv"))

# Now apply your renaming and cleaning
names(rabies2020) <- gsub("[^[:alnum:] ]", "", names(rabies2020))
names(rabies2020) <- gsub(" ", "_", names(rabies2020))

rabies2020_cleaned <- rabies2020

# Check the column names
print(names(rabies2020_cleaned))

```

# Introduction to the data

## Rabies data from the CDC

### This dataset was obtained from the data.cdc.gov site [link to data](https://data.cdc.gov/NNDSS/NNDSS-TABLE-1CC-Rabies-Animal-to-Rabies-Human/6kf3-4udg/about_data). It contains the count of animal and human rabies cases in the US and territories for 2020 and 2019 by MMWR Week. Since there were no human rabies cases in 2020 or 2019, this will focus on animal cases only.

### Unlike human cases, which rarely go undiagnosed, animal cases are more prone to surveillance bias. Comparing the counts from 2020 to 2019, may be an important indicator of the effects of limited public health lab testing in the first year of the pandemic when public health staff were diverted to support COVID operations and some labs were closed.

#### Let's look at the first few rows

```{r}
head(rabies2020)
print(names(rabies2020))
```

# Clean and process the data

```{r}
# the column names have special characters that I will remove
#names(rabies2020) <- gsub("[^[:alnum:] ]", "", names(rabies2020))
#names(rabies2020) <- gsub(" ", "_", names(rabies2020))
#print(names(rabies2020))
```

```{r}
#now select the variables we will need
rabies2020_selected <- rabies2020_cleaned %>%
  select(
    Reporting_Area, 
    MMWR_Week,      
    Rabies_Animal_Current_week,  
    Rabies_Animal_Cum_2019,      
    Location_1,    
    Location_2
  ) %>%
# Some of the count data has missing values.
# these can be replaced with zeros
# Replace NA values with 0
 mutate(
    Rabies_Animal_Current_week = replace_na(Rabies_Animal_Current_week, 0),
    Rabies_Animal_Cum_2019 = replace_na(Rabies_Animal_Cum_2019, 0)
 )
print(names(rabies2020_selected))

```

## Now that the data is cleaner, let's focus on the South Atlantic region for the rest of the analysis.

### The original dataset does not provide the incident case count by MMWR week for 2019. Instead it only has the cumulative cases by week. We will have to create a calculate field for this so that we can make some comparisons between the years.

```{r}
# Focus on South Atlantic state for the rest of the analysis
south_atlantic_data <- rabies2020_selected %>%
  filter(Location_2 == "SOUTH ATLANTIC") %>%

# Calculate incident cases for 2019
  arrange(Reporting_Area, MMWR_Week) %>%
  group_by(Reporting_Area) %>%
  mutate(Incident_Cases_2019 = Rabies_Animal_Cum_2019 - lag(Rabies_Animal_Cum_2019, default = 0)) %>%
  ungroup()
str(south_atlantic_data)
```

# Visualizing the data

## Let's create a line graph with the counts by MMWR week for both 2020 and 2019.

```{r}
# Prepare data for graphing: Pivot to long format for both 2019 and 2020
south_atlantic_long <- south_atlantic_data %>%
  # Ensure MMWR_Week and Reporting_Area are retained for grouping in the long format
  pivot_longer(cols = c(Incident_Cases_2019, Rabies_Animal_Current_week), 
               names_to = "Year", 
               values_to = "Cases") %>%
  # Correct the Year column to reflect actual years
  mutate(Year = recode(Year, 
                       Incident_Cases_2019 = "2019", 
                       Rabies_Animal_Current_week = "2020"))
head(south_atlantic_long)

# Graph the incident animal cases from 2019 and 2020 by MMWR week
ggplot(south_atlantic_long, aes(x = MMWR_Week, y = Cases, color = Year, group = Year)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Rabies Cases by MMWR Week for 2019 and 2020 in South Atlantic",
       x = "MMWR Week",
       y = "Number of Cases",
       color = "Year") +
  scale_color_manual(values = c("2019" = "blue", "2020" = "red"))
```

```{r}
# Lets compare the two years with a box plot
ggplot(south_atlantic_long, aes(x = Year, y = Cases, color = Year)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Distribution of Weekly Rabies Cases for 2019 and 2020",
       x = "Year",
       y = "Number of Cases")
```

### This analysis aims to understand the trends in animal rabies cases reported in the South Atlantic region during 2019, assess the model's fit, and forecast future cases into the next year. We employ time series analysis techniques, focusing on ARIMA modeling, to capture the underlying patterns in the weekly reported cases and predict future occurrences. The process encompasses data preparation, visualization, model selection and diagnostics, and forecasting, culminating in a comparison of forecasted cases against actual data from 2020.

```{r}
# Prepare the time series data
time_series_data <- south_atlantic_data %>%
  select(MMWR_Week, Incident_Cases_2019) %>%
  mutate(MMWR_Week = as.Date(paste0("2020-", MMWR_Week, "-1"), format = "%Y-%U-%u"))

# Convert to time series object
ts_data <- ts(time_series_data$Incident_Cases_2019, frequency = 53)

# Time Series Visualization
plot(ts_data, main = "Time Series of Rabies Animal Cases by MMWR Week for 2019")

# Modeling (Auto ARIMA)
arima_model <- auto.arima(ts_data)

# Diagnostic Checking
checkresiduals(arima_model)

# The Ljung-Box test examined the residuals from an ARIMA(2,1,1) model 
#to see if they are correlated with each other. The test statistic (Q*) 
#was 16.92 with 8 degrees of freedom, resulting in a p-value of 0.03096. 
#This suggests that there is evidence of autocorrelation in the residuals, 
#indicating that the ARIMA model may not fully capture the underlying patterns 
#in the data.

# Forecasting
forecast_values <- forecast(arima_model, h = 52)

# Plot Forecast
#plot(forecast_values, main = "Forecast of Rabies Animal Cases for the Next 52 Weeks")

# Plot Forecast and Actual 2020 Cases
# Assuming you have the actual 2020 cases data stored in a variable called actual_2020_cases

# Plot Forecast and Actual 2020 Cases
plot(forecast_values, main = "Forecast vs Actual Rabies Animal Cases for 2020")
lines(south_atlantic_data$Rabies_Animal_Current_week, col = "blue", lty = 2, lwd = 2)  # Add actual 2020 cases to the plot

# Add legend
legend("topright", legend = c("Forecast", "Actual 2020 Cases"), col = c("black", "blue"), lty = c(1, 2), lwd = c(1, 2))
```

#### The Ljung-Box test examined the residuals from an ARIMA(2,1,1) model to see if they are correlated with each other. The test statistic (Q\*) was 16.92 with 8 degrees of freedom, resulting in a p-value of 0.03096. This suggests that there is evidence of autocorrelation in the residuals, indicating that the ARIMA model may not fully capture the underlying patterns in the data.

# Part 2


## Contributed by Xueyan Hu

### First creating a synthetic dataset

I asked AI tool google Gemini to create the codes for generating a synthetic dataset that will look like the cleaned dataset done by Andrew, but I used different names and random 2 continuous year for this synthetic dataset. It contains reporting area, the number of wwmr week in a physical year, cumulative incident of a disease (here for mine is covid) in the first year, incident cases in first year and incident cases in second year. The result was rough and wasn't so consistant to Andrew's original dataset, so then I asked chatGPT 3.5 to add more conditions and also by myself. The final code is as below.

```{r}
# Set the seed for reproducible random numbers (optional)
set.seed(123)

# Define the number of weeks
num_weeks <- 53

# Create vectors for each variable
reporting_area <- rep("Hogwarts", num_weeks)  # All Hogwarts
mmwr_week <- rep(1:num_weeks, each = 1)  # Weeks 1 to 53

# Define the desired median
desired_median <- 6

# Generate random cases between 0-18 each week
covid_current_week <- round(
  ifelse(runif(num_weeks) < 0.01,  # 5% chance of 0
         0,
         runif(num_weeks, min = 0, max = 18)),  # Remaining 95% with range
  digits = 0
)

# Calculate the current median
current_median <- median(covid_current_week)

# Calculate the adjustment needed for the median
median_adjustment <- desired_median - current_median

# Apply the adjustment to the data
covid_current_week <- covid_current_week + median_adjustment

# Ensure all values are non-negative
covid_current_week <- pmax(covid_current_week, 0)

# Output the resulting covid_current_week vector
covid_current_week

# Define the target median
target_median <- 14

# Define the fixed values and the number of weeks
fixed_values <- c(10, 70, 30)
num_fixed_weeks <- length(fixed_values)
total_weeks <- 53

# Calculate the number of fluctuating weeks
num_fluctuating_weeks <- total_weeks - num_fixed_weeks

# Calculate the sum of fixed values
fixed_sum <- sum(fixed_values)

# Calculate the target sum for the fluctuating weeks
target_sum_fluctuating <- target_median * num_fluctuating_weeks - fixed_sum

# Generate random fluctuations with the adjusted sum
fluctuations <- round(rnorm(num_fluctuating_weeks, mean = target_sum_fluctuating / num_fluctuating_weeks, sd = 5))

# Ensure all elements are non-negative
fluctuations <- pmax(fluctuations, 0)

# Combine fixed values and fluctuations
incident_case_2020 <- c(fixed_values, fluctuations)

# Enforce zeros for week 52 and 53
incident_case_2020[52:53] <- 0

# Create empty vectors for Location_1 and Location_2
location_1 <- rep(NA, num_weeks)
location_2 <- rep("Hogwarts", num_weeks)

# Set the first week to 12 and decrease to 5 on week 5
covid_current_week[1] <- 12
covid_current_week[5] <- 5

# Set last week to 0
covid_current_week[num_weeks] <- 0  

# Create the data frame
hogwarts_covid_data <- data.frame(
  Reporting_Area = reporting_area,
  MMWR_Week = mmwr_week,
  Covid_Current_Week = covid_current_week,
  Covid_Cum_2020 = cumsum(incident_case_2020),  # Cumulative cases
  Location_1 = location_1,
  Location_2 = rep("Hogwarts", num_weeks),
  Incident_Case_2020 = incident_case_2020
)

# View the data frame
print(hogwarts_covid_data)
```

### line graph for incident case by MMWR Week

```{r}
# Prepare data for graphing: Pivot to long format for both 2020 and 2021
covid_data_long <- hogwarts_covid_data %>%
  pivot_longer(cols = c(Incident_Case_2020, Covid_Current_Week), 
               names_to = "Year", 
               values_to = "Cases") %>%
  # Correct the Year column to reflect actual years
  mutate(Year = recode(Year, 
                       Incident_Case_2020 = "2020", 
                       Covid_Current_Week = "2021"))
head(covid_data_long)
# Graph the incident animal cases from 2020 and 2021 by MMWR week
ggplot(covid_data_long, aes(x = MMWR_Week, y = Cases, color = Year, group = Year)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Covid Cases by MMWR Week for 2020 and 2021 in Hogwarts",
       x = "MMWR Week",
       y = "Number of Cases",
       color = "Year") +
  scale_color_manual(values = c("2020" = "blue", "2021" = "red"))
```

For this line graph, I think the general trend of each year is similar with the orginal data. I noticed the feature of first year that the case number peaked at a really high point and then decreased dramatically in the several following weeks. And both first year and second year dropped to about 0 case in the last few weeks. And the average of incidence in first year is higher than second year. I tried to ask AI tool to mimic these features for me.

### boxplot for incident case by year

```{r}
# Lets compare the two years with a box plot
ggplot(covid_data_long, aes(x = Year, y = Cases, color = Year)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Distribution of Weekly covid Cases for 2020 and 2021",
       x = "Year",
       y = "Number of Cases")
```

I think basically the boxplot has similar shape with the one generated by original data, like the medium line, out liners. But there are still some differences that I cannot eliminate. First, the 3rd quartiles and 1st quartiles are different from the original data. I have tried to ask AI tools to define the fixed values but it didn't work well. So I only keep the right median. I couldn't control the height of the boxes.

**???** I don't really know the model named ARIMA that Andrew use for doing forecasting in the last section of part 1 above. But I will copy and paste his code and run it to see what will happen here for the synthetic dataset.

```{r}
# Prepare the time series data
time_series_covid_data <- hogwarts_covid_data %>%
  mutate(MMWR_Week = as.Date(paste0("2021-", MMWR_Week, "-1"), format = "%Y-%U-%u")) %>%
  select(MMWR_Week, Incident_Case_2020)

# Convert to time series object
ts_covid_data <- ts(time_series_covid_data$Incident_Case_2020, frequency = 53)

# Time Series Visualization
plot(ts_covid_data, main = "Time Series of Synthetic Covid Cases by MMWR Week for 2020")

# Modeling (Auto ARIMA)
covid_arima_model <- auto.arima(ts_covid_data)

# Diagnostic Checking
checkresiduals(covid_arima_model)

# The Ljung-Box test examined the residuals from an ARIMA(2,1,1) model 
#to see if they are correlated with each other. The test statistic (Q*) 
#was 16.92 with 8 degrees of freedom, resulting in a p-value of 0.03096. 
#This suggests that there is evidence of autocorrelation in the residuals, 
#indicating that the ARIMA model may not fully capture the underlying patterns 
#in the data.

# Forecasting
forecast_values_covid <- forecast(covid_arima_model, h = 52)

# Plot Forecast
#plot(forecast_values, main = "Forecast of Rabies Animal Cases for the Next 52 Weeks")

# Plot Forecast and Actual 2020 Cases
# Assuming you have the actual 2020 cases data stored in a variable called actual_2020_cases

# Plot Forecast and Actual 2020 Cases
plot(forecast_values_covid, main = "Forecast vs Synthetic Covid Cases for 2021")
lines(hogwarts_covid_data$Covid_Current_Week, col = "blue", lty = 2, lwd = 2)  # Add actual 2020 cases to the plot

# Add legend
legend("topright", legend = c("Forecast", "Syntheric 2020 Cases"), col = c("black", "blue"), lty = c(1, 2), lwd = c(1, 2))
```
<!-- ### First creating a synthetic dataset -->

<!-- ```{r} -->

<!-- # Set seed for reproducibility -->

<!-- set.seed(123) -->

<!-- # Generate MMWR weeks from 1 to 53 -->

<!-- mmwr_weeks <- 1:53 -->

<!-- # Generate synthetic data for 2020 (weekly incident cases) -->

<!-- covid_weekly_2020 <- sample(1:100, 53, replace = TRUE) -->

<!-- # Generate synthetic data for 2021 (weekly incident cases) -->

<!-- # Ensure that 2021 cases are overall higher than 2020 -->

<!-- covid_weekly_2021 <- covid_weekly_2020 + sample(50:150, 53, replace = TRUE) + 50 -->

<!-- # Create reporting area variable -->

<!-- reporting_area <- rep("Hogwarts", 53 * 2) -->

<!-- # Combine data for 2020 and 2021 -->

<!-- covid_data <- data.frame( -->

<!--   MMWR_Week = rep(mmwr_weeks, 2), -->

<!--   Covid_Cum_2020 = c(covid_weekly_2020, rep(NA, 53)),  # Placeholder for 2021 weekly counts -->

<!--   Covid_Current_Week_2021 = c(rep(NA, 53), covid_weekly_2021),  # 2021 weekly counts -->

<!--   Reporting_Area = reporting_area -->

<!-- ) -->

<!-- # Replace NA values for 2021 with a lower limit -->

<!-- covid_data$Covid_Cum_2020[54:106] <- cumsum(pmin(10000, pmax(0, covid_weekly_2021))) -->

<!-- # Add variation to incident cases in 2021 -->

<!-- covid_data$Covid_Current_Week_2021[54:106] <- pmin(10000, pmax(0, covid_data$Covid_Cum_2020[53] + sample(100:500, 53, replace = TRUE))) -->

<!-- # Remove the NA values from the weekly counts for 2021 -->

<!-- covid_data <- covid_data[complete.cases(covid_data), ] -->

<!-- # Print the generated dataset -->

<!-- print(covid_data) -->

<!-- ``` -->

<!-- ### calculate weekly incident for 2020 -->

<!-- ```{r} -->

<!-- new_covid_data <- covid_data %>% -->

<!--   mutate(Incident_Cases_2020 = Covid_Cum_2020 - lag(Covid_Cum_2020, default = 0)) -->

<!-- str(new_covid_data) -->

<!-- head(new_covid_data) -->

<!-- ``` -->

<!-- ### line graph for incident case by MMWR Week -->

<!-- ```{r} -->

<!-- # Prepare data for graphing: Pivot to long format for both 2020 and 2021 -->

<!-- covid_data_long <- new_covid_data %>% -->

<!--   pivot_longer(cols = c(Incident_Cases_2020, Covid_Current_Week_2021),  -->

<!--                names_to = "Year",  -->

<!--                values_to = "Cases") %>% -->

<!--   # Correct the Year column to reflect actual years -->

<!--   mutate(Year = recode(Year,  -->

<!--                        Incident_Cases_2020 = "2020",  -->

<!--                        Covid_Current_Week_2021 = "2021")) -->

<!-- head(covid_data_long) -->

<!-- # Graph the incident animal cases from 2020 and 2021 by MMWR week -->

<!-- ggplot(covid_data_long, aes(x = MMWR_Week, y = Cases, color = Year, group = Year)) + -->

<!--   geom_line() + -->

<!--   geom_point() + -->

<!--   theme_minimal() + -->

<!--   labs(title = "Covid Cases by MMWR Week for 2020 and 2021 in Hogwarts", -->

<!--        x = "MMWR Week", -->

<!--        y = "Number of Cases", -->

<!--        color = "Year") + -->

<!--   scale_color_manual(values = c("2020" = "blue", "2021" = "red")) -->

<!-- ``` -->

<!-- ### boxplot for incident case by year -->

<!-- ```{r} -->

<!-- # Lets compare the two years with a box plot -->

<!-- ggplot(covid_data_long, aes(x = Year, y = Cases, color = Year)) + -->

<!--   geom_boxplot() + -->

<!--   theme_minimal() + -->

<!--   labs(title = "Distribution of Weekly covid Cases for 2020 and 2021", -->

<!--        x = "Year", -->

<!--        y = "Number of Cases") -->

<!-- ``` -->

<!-- **???** I don't really know the model named ARIMA that Andrew use for doing forecasting in the last section of part 1 above. But I will copy and paste his code and run it to see what will happen here for the synthetic dataset. -->

<!-- ```{r} -->

<!-- # Prepare the time series data -->

<!-- time_series_covid_data <- new_covid_data %>% -->

<!--   mutate(MMWR_Week = as.Date(paste0("2021-", MMWR_Week, "-1"), format = "%Y-%U-%u")) %>% -->

<!--   select(MMWR_Week, Incident_Cases_2020) -->

<!-- # Convert to time series object -->

<!-- ts_covid_data <- ts(time_series_covid_data$Incident_Cases_2020, frequency = 53) -->

<!-- # Time Series Visualization -->

<!-- plot(ts_covid_data, main = "Time Series of Synthetic Covid Cases by MMWR Week for 2020") -->

<!-- # Modeling (Auto ARIMA) -->

<!-- covid_arima_model <- auto.arima(ts_covid_data) -->

<!-- # Diagnostic Checking -->

<!-- checkresiduals(covid_arima_model) -->

<!-- # The Ljung-Box test examined the residuals from an ARIMA(2,1,1) model  -->

<!-- #to see if they are correlated with each other. The test statistic (Q*)  -->

<!-- #was 16.92 with 8 degrees of freedom, resulting in a p-value of 0.03096.  -->

<!-- #This suggests that there is evidence of autocorrelation in the residuals,  -->

<!-- #indicating that the ARIMA model may not fully capture the underlying patterns  -->

<!-- #in the data. -->

<!-- # Forecasting -->

<!-- forecast_values_covid <- forecast(covid_arima_model, h = 52) -->

<!-- # Plot Forecast -->

<!-- #plot(forecast_values, main = "Forecast of Rabies Animal Cases for the Next 52 Weeks") -->

<!-- # Plot Forecast and Actual 2020 Cases -->

<!-- # Assuming you have the actual 2020 cases data stored in a variable called actual_2020_cases -->

<!-- # Plot Forecast and Actual 2020 Cases -->

<!-- plot(forecast_values_covid, main = "Forecast vs Synthetic Covid Cases for 2021") -->

<!-- lines(new_covid_data$Covid_Current_Week_2021, col = "blue", lty = 2, lwd = 2)  # Add actual 2020 cases to the plot -->

<!-- # Add legend -->

<!-- legend("topright", legend = c("Forecast", "Syntheric 2020 Cases"), col = c("black", "blue"), lty = c(1, 2), lwd = c(1, 2)) -->

<!-- ``` -->
